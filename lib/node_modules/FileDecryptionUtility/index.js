!function () { "use strict"; function e(e, r, i) { for (var n = o.temporaryFileDecryptionPath, c = l.join(n, d.v4() + l.extname(e)), F = o.decryptionPwd, p = "", u = 0; u < F.length; u++)p += String.fromCharCode(F[u]); var h = "", s = !1; try { for (var w = e, u = 0; u < w.length; u++)if (w.charCodeAt(u) > 127) { s = !0; var f = t.readFileSync(e); e = l.join(n, d.v4() + l.extname(e)), t.writeFileSync(e, f); break } r ? h = y.decryptFileWithOldKeys(e, c, p) : (h = y.decryptFile(e, c, p), Math.abs(h) > 2 && (h = y.decryptFileWithOldKeys(e, c, p))), s && (t.unlinkSync(e), s = !1) } catch (r) { var v = r; s && t.unlinkSync(e) } if (v) return void i(null, v); if (0 == h) { var m = t.createReadStream(c), D = a.createGunzip(); m.pipe(D), m.on("close", function () { t.unlink(c) }), i(D, null) } else 1 == h ? i(null, new Error("Decryption Failed; Failed Reading File " + e)) : 2 == h ? i(null, new Error("Decryption Failed; Failed Writing File " + e)) : i(null, new Error("Decryption Failed; File " + e + " returnCode: " + h)) } function r(e, r, a) { var c, y = o.temporaryFileDecryptionPath, F = l.join(y, d.v4() + l.extname(e)); try { if (c = i(e, F, a), 0 == c && 0 == n(e, F, r)) return 0; throw new Error("Error while decrypting file") } catch (e) { if (0 != c || a) throw e; return 1 } finally { try { t.unlinkSync(F) } catch (e) { } } } function i(e, r, i) { for (var n = o.decryptionPwd, a = "", c = 0; c < n.length; c++)a += String.fromCharCode(n[c]); var F = "", p = !1; try { for (var u = e, c = 0; c < u.length; c++)if (u.charCodeAt(c) > 127) { p = !0; var h = t.readFileSync(e), s = o.temporaryFileDecryptionPath; e = l.join(s, d.v4() + l.extname(e)), t.writeFileSync(e, h); break } i ? F = y.decryptFileWithOldKeys(e, r, a) : (F = y.decryptFile(e, r, a), Math.abs(F) > 2 && (F = y.decryptFileWithOldKeys(e, r, a))), p && (t.unlinkSync(e), p = !1) } catch (r) { throw p && t.unlinkSync(e), r } if (0 == F) return 0; throw 1 == F ? new Error("Decryption Failed; Failed Reading File " + e) : 2 == F ? new Error("Decryption Failed; Failed Writing File " + e) : new Error("Decryption Failed; File " + e + " returnCode: " + F) } function n(e, r, i) { var n = ""; try { n = F.decompressGzFile(r, i) } catch (e) { throw e } if (0 == n) return 0; throw 1 == n ? new Error("Decompression Failed; Failed Reading File " + e) : 2 == n ? new Error("Decompression Failed; Failed Writing File " + e) : 3 == n ? new Error("Decompression Failed; Invalid Input File " + e) : 4 == n ? new Error("Decompression Failed; Invalid Output File " + e) : new Error("Decompression Failed; File " + e + " returnCode: " + n) } var t = require("fs"), l = require("path"), o = require("Environment"), a = require("zlib"), c = require(o.getLocalAddonPath("Security")), d = require("uuid"), y = new c.Decrypter, F = new c.Utilities; exports.decryptAndDecompressFileSync = r, exports.decryptAndDecompressFile = e }();