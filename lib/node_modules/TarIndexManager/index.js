var TarReader=require("./TarReader.js"),fs=require("fs"),_=require("underscore"),async=require("async"),path=require("path"),TarIndexManager=function(r,a,e){var t=this;t._app=r,t._tarReaders=[],t._publicDataRoot=e,t._pathsToTarAndIndexDirectoryLocatison=a,t._refreshTarReaders(a,e)};TarIndexManager.prototype.getNumberOfTarReaders=function(r){var a=this;_.isEmpty(a._tarReaders)?r(0):a._tarReaders[0].testTarReader(function(e){r(e?a._tarReaders.length:0)})},TarIndexManager.prototype.getFileStream=function(r){var a,e=this;return _.find(e._tarReaders,function(t){try{var n=stripPathBase(r,e._publicDataRoot)}catch(r){return void e._app.error("Error determining path within tar: ",r)}return a=t.getFileStreamFromTar(n)}),a},TarIndexManager.prototype.getLocationObject=function(r){var a,e=this;return _.find(e._tarReaders,function(t){try{var n=stripPathBase(r,e._publicDataRoot)}catch(r){return void e._app.error("Error determining path within tar: ",r)}return a=t.getLocationObject(n),a&&(a.tarPath=t.path),a}),a},TarIndexManager.prototype.exists=function(r){var a=this;return!!_.find(a._tarReaders,function(e){try{var t=stripPathBase(r,a._publicDataRoot)}catch(r){return void a._app.error("Error determining path within tar: ",r)}return e.checkFileExistence(t)})};var stripPathBase=function(r,a){var e=_.compact(path.normalize(r.toUpperCase()).split(path.sep)),t=_.compact(path.normalize(a.toUpperCase()).split(path.sep)),n=[];return _.each(e,function(a,e){if(e>=t.length)n.push(a);else if(t[e]!==a)throw new Error("Invalid Path: "+r)}),path.normalize(n.join("/"))};TarIndexManager.prototype._refreshTarReaders=function(r,a,e){var t=this;t._publicDataRoot=a;var n=!1;return e=e||_.noop,async.each(t._tarReaders,function(r,a){r.destroyWhenDone(a)},function(r){e(r)}),t._tarReaders=[],_.each(r,function(r){try{var a=fs.readdirSync(r)}catch(a){return void t._app.error("Error reading directory containing Tar/Index directories: "+r,a)}var e=_.chain(a).filter(function(r){try{return".tar"===path.extname(path.normalize(r))}catch(r){t._app.error("Error checking if file is a tar file: ",r)}}).map(function(r){try{return path.basename(path.normalize(r),".tar")}catch(r){t._app.error("Error getting file name from path: ",r)}}).compact().value();_.each(e,function(a){var e=path.join(r,a+".tar"),i=path.join(r,a+".index");try{t._tarReaders.push(new TarReader(t._app,e,i)),n=!0}catch(r){t._app.error("Error making new TarReader. "+r)}})}),n},module.exports=TarIndexManager;